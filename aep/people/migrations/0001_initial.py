# Generated by Django 5.1.2 on 2024-10-29 18:32

import django.db.models.deletion
import django.utils.timezone
import people.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Paperwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ferpa', models.BooleanField(default=False, verbose_name='FERPA')),
                ('testing', models.BooleanField(default=False, verbose_name='Testing Agreement')),
                ('technology', models.BooleanField(default=False, verbose_name='Technology Usage Agreement')),
                ('contract', models.BooleanField(default=False, verbose_name='Student Contract')),
                ('disclosure', models.BooleanField(default=False, verbose_name='Self-Disclosure Form')),
                ('writing', models.BooleanField(default=False, verbose_name='Writing Sample')),
                ('pic_id', models.BooleanField(default=False, verbose_name='Picture ID')),
                ('sd_reading', models.BooleanField(default=False, verbose_name='Reading')),
                ('sd_math', models.BooleanField(default=False, verbose_name='Math')),
                ('sd_language', models.BooleanField(default=False, verbose_name='Language')),
                ('sd_attention', models.BooleanField(default=False, verbose_name='Attention Deficit Disorder/Attention Deficit Hyperactivity Disorder')),
                ('sd_other', models.CharField(blank=True, max_length=140, verbose_name='Other (explain)')),
                ('sh_self_se', models.BooleanField(default=False, verbose_name='Self-contained Special Education Classroom')),
                ('sh_resource_se', models.BooleanField(default=False, verbose_name='Resource Special Education Classroom')),
                ('sh_title1_read', models.BooleanField(default=False, verbose_name='Title 1 Reading')),
                ('sh_title1_math', models.BooleanField(default=False, verbose_name='Title 1 Math')),
                ('sh_504', models.BooleanField(default=False, verbose_name='504 Accommodations')),
                ('sh_medication', models.BooleanField(default=False, verbose_name='Medication for A.D.D. or A.D.H.D')),
                ('sh_other', models.CharField(blank=True, max_length=140, verbose_name='Other (explain)')),
                ('sh_request', models.TextField(blank=True, verbose_name='I feel I need help in the following area(s):')),
                ('writing_sample', models.TextField(blank=True, verbose_name='Student Writing Sample')),
                ('signature', models.CharField(blank=True, max_length=140)),
                ('sig_date', models.DateField(null=True)),
                ('guardian_signature', models.CharField(blank=True, max_length=140)),
                ('g_sig_date', models.DateField(blank=True, null=True)),
                ('pic_id_file', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'verbose_name_plural': 'paperwork',
                'ordering': ['student__last_name', 'student__first_name'],
            },
        ),
        migrations.CreateModel(
            name='PoP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('last_service_date', models.DateField(verbose_name='Date of last service')),
                ('active', models.BooleanField(default=True)),
                ('made_gain', models.BooleanField(default=False)),
                ('pretest_date', models.DateField(null=True)),
                ('pretest_type', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'Period of Participation',
                'verbose_name_plural': 'Periods of Participation',
                'ordering': ['-start_date', 'student'],
                'get_latest_by': 'last_service_date',
            },
        ),
        migrations.CreateModel(
            name='Prospect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateField(default=django.utils.timezone.now)),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=150, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=80, verbose_name='Email Address')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('contact_preference', models.CharField(choices=[('Call', 'Call'), ('Text', 'Text'), ('Email', 'Email')], max_length=5, verbose_name='How do you prefer to be contacted?')),
                ('contact_time', models.CharField(blank=True, choices=[('M', '8am - 12pm'), ('A', '12pm - 4pm'), ('E', '4pm - 8pm')], max_length=1, verbose_name='What time do you prefer to be contacted?')),
                ('primary_language', models.CharField(blank=True, choices=[('english', 'English'), ('spanish', 'Spanish'), ('vietnamese', 'Vietnamese'), ('arabic', 'Arabic'), ('chinese', 'Chinese'), ('french', 'French'), ('korean', 'Korean'), ('japanese', 'Japanese'), ('creole', 'Creole'), ('portugese', 'Portugese'), ('turkish', 'Turkish'), ('russian', 'Russian'), ('other', 'Other')], max_length=20, verbose_name='Primary Language')),
                ('program', models.CharField(blank=True, choices=[('ccr', 'HiSET/GED'), ('ell', 'English Language Learning')], max_length=5, verbose_name='What classes are you interested in?')),
                ('active', models.BooleanField(default=True)),
                ('duplicate', models.BooleanField(default=False, verbose_name='Probable Duplicate')),
                ('returning_student', models.BooleanField(default=False, verbose_name='Probable Returning Student')),
                ('for_credit', models.BooleanField(default=False, verbose_name='For-credit Student')),
                ('slug', models.CharField(default=people.models.make_prospect_slug, max_length=5)),
                ('advisor_assigned_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='WIOA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SID', models.CharField(blank=True, max_length=11, verbose_name='SSN')),
                ('hispanic_latino', models.BooleanField(default=False, verbose_name='Hispanic/Latino')),
                ('amer_indian', models.BooleanField(default=False, verbose_name='American Indian or Alaska Native')),
                ('asian', models.BooleanField(default=False, verbose_name='Asian')),
                ('black', models.BooleanField(default=False, verbose_name='Black or African American')),
                ('white', models.BooleanField(default=False, verbose_name='White')),
                ('pacific_islander', models.BooleanField(default=False, verbose_name='Native Hawaiian or Pacific Islander')),
                ('native_language', models.CharField(blank=True, choices=[('english', 'English'), ('spanish', 'Spanish'), ('vietnamese', 'Vietnamese'), ('arabic', 'Arabic'), ('chinese', 'Chinese'), ('french', 'French'), ('korean', 'Korean'), ('japanese', 'Japanese'), ('creole', 'Creole'), ('portugese', 'Portugese'), ('turkish', 'Turkish'), ('russian', 'Russian'), ('other', 'Other')], max_length=20, verbose_name='Native Language')),
                ('other_language', models.CharField(blank=True, max_length=20, verbose_name='Other Native Language Not Listed')),
                ('country', models.CharField(blank=True, choices=[('1', 'United States'), ('2', 'India'), ('3', 'Australia'), ('4', 'Japan'), ('5', 'New Zealand'), ('6', 'Philippines'), ('7', 'Turkey'), ('8', 'Austria'), ('9', 'Belgium'), ('10', 'Denmark'), ('11', 'France'), ('12', 'Germany'), ('13', 'Italy'), ('14', 'Portugal'), ('15', 'Spain'), ('16', 'Sweden'), ('17', 'Argentina'), ('18', 'Brazil'), ('19', 'Russia'), ('20', 'South Korea'), ('21', 'Egypt'), ('22', 'England'), ('23', 'Greece'), ('24', 'Singapore'), ('25', 'South Africa'), ('26', 'Mexico'), ('27', 'Afghanistan'), ('28', 'Algeria'), ('29', 'Albania'), ('30', 'Aruba'), ('31', 'Bahamas'), ('32', 'North Korea'), ('33', 'Canada'), ('34', 'China'), ('35', 'Georgia'), ('36', 'Hong Kong'), ('37', 'Indonesia'), ('38', 'Iraq'), ('39', 'Israel'), ('40', 'Kuwait'), ('41', 'Korea'), ('42', 'Lebanon'), ('43', 'Malaysia'), ('44', 'Nigeria'), ('45', 'Norway'), ('46', 'Oman'), ('47', 'Pakistan'), ('48', 'Switzerland'), ('49', 'Thailand'), ('50', 'United Arab Emirates'), ('51', 'United Kingdom'), ('52', 'Switzerland'), ('53', 'Thailand'), ('100', 'Other')], max_length=20, verbose_name='Country of Birth')),
                ('other_country', models.CharField(blank=True, max_length=20, verbose_name='Other Country if not listed')),
                ('current_employment_status', models.CharField(choices=[('1', 'Employed - Full Time'), ('9', 'Employed - Part Time'), ('5', 'Employed, but received notice of termination or Military separation is pending'), ('2', 'Unemployed - Looking For Work'), ('4', 'Not in labor force / Not looking for work'), ('7', 'Retired')], default='2', max_length=2, verbose_name='What is your current employment status')),
                ('employer', models.CharField(blank=True, max_length=25, verbose_name='Employer')),
                ('occupation', models.CharField(blank=True, max_length=25, verbose_name='Occupation')),
                ('parental_status', models.CharField(blank=True, choices=[('1', 'parent of children 1-5'), ('2', 'parent of children 6-10'), ('3', 'parent of children 11-13'), ('4', 'parent of children 14-18'), ('0', 'No')], max_length=2, verbose_name='Are you a parent?')),
                ('current_industry', models.CharField(blank=True, max_length=100, verbose_name='If you are currently employed, what industry cluster do you work in?')),
                ('industry_preference', models.CharField(blank=True, max_length=100, verbose_name='If you could get a job or change jobs, what industry cluster would you like to work in?')),
                ('household_income', models.PositiveIntegerField(default=0, verbose_name='Annual Household Income')),
                ('household_size', models.PositiveIntegerField(default=1, verbose_name='How many family members including yourself have lived in your household in the past six months?')),
                ('TANF', models.BooleanField(default=False, verbose_name='TANF (Temporary Assistance for Needy Families')),
                ('TANF_2', models.BooleanField(default=False, verbose_name='Have you received TANF for more than two years in total?')),
                ('SNAP', models.BooleanField(default=False, verbose_name='SNAP (Supplemental Nutrition Assistance Program) Food Stamps')),
                ('SSI', models.BooleanField(default=False, verbose_name='SSI (Supplemental Security Income)')),
                ('Tstate', models.BooleanField(default=False, verbose_name='Tstate or Local income-based public assistance')),
                ('veteran', models.BooleanField(default=False, verbose_name='I am a veteran')),
                ('criminal_record', models.BooleanField(default=False, verbose_name='I have a criminal record that makes it hard to find a job.')),
                ('long_term_unemployed', models.BooleanField(default=False, help_text='If you are not working, has it been 27 weeks (6 months) or longer since you had a job?', verbose_name='Long-term Unemployed')),
                ('migrant_seasonal_status', models.CharField(choices=[('0', 'I am a farmworker'), ('1', 'I am a seasonal farmworker who has worked the last 12 months in agriculture or farm fishing labor'), ('2', 'I am a seasonal farmworker with no permanent residence (migrant)'), ('3', 'I am a dependent of a farmworker'), ('4', 'None of these apply to me')], default='4', max_length=2, verbose_name='Farmworker Status')),
                ('single_parent', models.BooleanField(default=False, verbose_name='I am a single parent. I am unmarried or seperated from my spouse and have primary responsibility for one or more dependent children under the age of 18, or I am a single, pregnant woman.')),
                ('help_with_schoolwork', models.BooleanField(default=False, verbose_name='Helping more frequently with their schoolwork.')),
                ('student_teacher_contact', models.BooleanField(default=False, verbose_name="Increasing contact with my children's teachers to discuss children's education")),
                ('parent_volunteering', models.BooleanField(default=False, verbose_name="Being more involved in my children's school, such as attendending school activities and parent meetings, and volunteering")),
                ('read_to_children', models.BooleanField(default=False, verbose_name='Reading to children')),
                ('visit_library', models.BooleanField(default=False, verbose_name='Visiting a library')),
                ('purchase_books', models.BooleanField(default=False, verbose_name='Purchasing books or magazines')),
                ('referred_by', models.CharField(blank=True, choices=[('1', 'TV'), ('2', 'RADIO'), ('3', 'SOCIAL MEDIA'), ('4', 'BROCHURE'), ('5', 'CAREER COMPASS'), ('6', 'COACH'), ('7', 'COLLEGE RECRUITER'), ('8', 'FACULTY/STAFF'), ('9', 'FAMILY MEMBER'), ('10', 'FORMER STUDENT'), ('11', 'FRIEND'), ('12', 'HIGH SCHOOL COUNSELOR'), ('13', 'INTERNET SEARCH'), ('14', 'NEWSPAPER'), ('15', 'OTHER'), ('16', 'ONE STOP'), ('17', 'AMERICAN JOB CENTER'), ('18', 'UNEMPLOYMENT OFFICE')], max_length=2)),
                ('digital_signature', models.CharField(blank=True, max_length=100, verbose_name='DISCLAIMER: By typing your name below, you are signing this application electronically. You agree that your electronic signature is the legal equivalent of your manual signature on this application.')),
                ('disability_notice', models.CharField(blank=True, choices=[('1', 'Yes'), ('2', 'No'), ('3', 'Do not wish to disclose')], help_text='In the Americans with Disabilities Act of 1990, a disability is defined as a physical or mental impairment that substantially limits one or more of a person’s major life activities.', max_length=1, verbose_name='Are you an Individual with a Disability?')),
                ('request_accommodation', models.BooleanField(default=False, help_text='If you have a disability and/or a condition for which you would like special accommodations for instruction or testing it is your responsibility to notify the program’s administrative office and provide professional documentation.', verbose_name='Check here to indicate that you understand your responsibility to request accommodations.')),
                ('rural_area', models.BooleanField(default=False, verbose_name='Do you live in a rural area?')),
                ('displaced_homemaker', models.BooleanField(default=False, verbose_name='I am a former homemaker who is having trouble finding a job or a better job.')),
                ('dislocated_worker', models.BooleanField(default=False, verbose_name='Are you a dislocated worker?')),
                ('cult_barriers_hind_emp', models.BooleanField(default=False, verbose_name='Are there cultural barriers hindering your employment?')),
                ('foster_care', models.BooleanField(default=False, verbose_name='I am in the foster care system (or used to be) and I am less than 24 years old.')),
                ('lacks_adequate_residence', models.BooleanField(default=False, verbose_name='I am homeless. I live in a motel, hotel, campground, transitional housing, or with another person because I lost my house or apartment')),
                ('in_foster_care', models.BooleanField(default=False, verbose_name='Are you currently in foster care?')),
                ('aged_out_foster_care', models.BooleanField(default=False, verbose_name='Have you aged out of foster care?')),
                ('exhaust_tanf', models.BooleanField(default=False, verbose_name='Are you receiving TANF assistance that ends within 2 years?')),
                ('job_corps', models.CharField(blank=True, choices=[('1', 'Yes'), ('2', 'No'), ('3', 'Unknown')], default=2, max_length=1, verbose_name='Are you in Job Corps?')),
                ('youth_build', models.CharField(blank=True, choices=[('1', 'Yes'), ('2', 'No'), ('3', 'Unknown')], default=2, max_length=1, verbose_name='Are you in a Youth Build program?')),
                ('recieves_public_assistance', models.BooleanField(default=False, verbose_name='Do you receive public assistance?')),
                ('low_family_income', models.BooleanField(default=False)),
                ('state_payed_foster', models.BooleanField(default=False)),
                ('disabled_in_poverty', models.BooleanField(default=False)),
                ('youth_in_high_poverty_area', models.BooleanField(default=False)),
                ('subject_of_criminal_justice', models.BooleanField(default=False)),
                ('arrest_record_employment_barrier', models.BooleanField(default=False)),
                ('irregular_sleep_accomodation', models.BooleanField(default=False)),
                ('migratory_child', models.BooleanField(default=False)),
                ('runaway_youth', models.BooleanField(default=False)),
                ('adult_one_stop', models.CharField(choices=[('1', 'Yes, Local Formula'), ('2', 'Yes, Statewide'), ('3', 'Yes, Both Local and Statewide'), ('4', 'No')], default='4', max_length=1)),
                ('youth_one_stop', models.CharField(choices=[('1', 'Yes, Local Formula'), ('2', 'Yes, Statewide'), ('3', 'Yes, Both Local and Statewide'), ('4', 'No')], default='4', max_length=1)),
                ('voc_rehab', models.CharField(choices=[('1', 'Vocational Rehabilitation'), ('2', 'Vocational Rehabilitation and Employment, Statewide'), ('3', 'Both, VR and VR&E'), ('4', 'No')], default='4', max_length=1)),
                ('wagner_peyser', models.CharField(choices=[('1', 'Yes'), ('2', 'No'), ('3', 'Unknown')], default='3', max_length=1)),
                ('school_status', models.CharField(blank=True, choices=[('1', 'In-School, H.S. or less'), ('2', 'In-School, Alternative School'), ('3', 'In-School, Post H.S.'), ('4', 'Not attending school or H.S. dropout'), ('5', 'Not attending school; H.S. graduate'), ('6', 'Not attending school; within age of compulsory school attendance')], default='4', max_length=1)),
                ('recieved_training', models.CharField(choices=[('1', 'Yes'), ('2', 'No')], default='2', max_length=1)),
                ('etp_name', models.CharField(blank=True, max_length=30)),
                ('etp_program', models.CharField(blank=True, choices=[('1', 'A program of study leading to an industry-recognized certificate or certification'), ('2', 'A program of study leading to a certificate of completion of an apprenticeship'), ('3', 'A program of study leading to a license recognized by the State involved or the Federal Government'), ('4', 'A program of study leading to an associate degree'), ('5', 'A program of study leading to a baccalaureate degree'), ('6', 'A program of study leading to a community college certificate of completion'), ('7', 'A program of study leading to a secondary school diploma or its equivalent'), ('8', 'A program of study leading to employment'), ('9', 'A program of study leading to a measureable skills gain leading to a credentiacredential or employmentment'), ('10', 'Youth Occupational Skills Training')], max_length=2)),
                ('etp_CIP_Code', models.CharField(blank=True, max_length=20)),
                ('training_type_1', models.CharField(blank=True, choices=[('1', 'On the Job Training'), ('2', 'Skill Upgrading'), ('3', 'Entrepreneurial Training (non-WIOA Youth)'), ('4', 'ABE or ESL in conjunction with Training (non-TAA funded)'), ('5', 'Customized Training'), ('6', 'Other Occupational Skills Training'), ('7', 'Remedial Training (ABE/ESL – TAA only)'), ('8', 'Prerequisite Training'), ('9', 'Registered Apprenticeship'), ('10', 'Youth Occupational Skills Training'), ('11', 'Other Non-Occupational-Skills Training'), ('0', 'No Training Service')], max_length=2)),
                ('training_type_2', models.CharField(blank=True, choices=[('1', 'On the Job Training'), ('2', 'Skill Upgrading'), ('3', 'Entrepreneurial Training (non-WIOA Youth)'), ('4', 'ABE or ESL in conjunction with Training (non-TAA funded)'), ('5', 'Customized Training'), ('6', 'Other Occupational Skills Training'), ('7', 'Remedial Training (ABE/ESL – TAA only)'), ('8', 'Prerequisite Training'), ('9', 'Registered Apprenticeship'), ('10', 'Youth Occupational Skills Training'), ('11', 'Other Non-Occupational-Skills Training'), ('0', 'No Training Service')], max_length=2)),
                ('training_type_3', models.CharField(blank=True, choices=[('1', 'On the Job Training'), ('2', 'Skill Upgrading'), ('3', 'Entrepreneurial Training (non-WIOA Youth)'), ('4', 'ABE or ESL in conjunction with Training (non-TAA funded)'), ('5', 'Customized Training'), ('6', 'Other Occupational Skills Training'), ('7', 'Remedial Training (ABE/ESL – TAA only)'), ('8', 'Prerequisite Training'), ('9', 'Registered Apprenticeship'), ('10', 'Youth Occupational Skills Training'), ('11', 'Other Non-Occupational-Skills Training'), ('0', 'No Training Service')], max_length=2)),
                ('adhd', models.BooleanField(default=False, verbose_name='ADHD')),
                ('autism', models.BooleanField(default=False, verbose_name='Autism')),
                ('deaf_blind', models.BooleanField(default=False, verbose_name='Deaf-blindness')),
                ('deaf', models.BooleanField(default=False, verbose_name='Deafness')),
                ('emotional_disturbance', models.BooleanField(default=False, verbose_name='Emotional Disturbance')),
                ('k12_iep', models.BooleanField(default=False, verbose_name='Had an IEP in K-12')),
                ('hard_of_hearing', models.BooleanField(default=False, verbose_name='Hard of Hearing')),
                ('intellectual_disability', models.BooleanField(default=False, verbose_name='Intellectual Disability')),
                ('multiple_disabilities', models.BooleanField(default=False, verbose_name='Multiple Disabilities')),
                ('orthopedic_impairment', models.BooleanField(default=False, verbose_name='Orthopedic Impairment')),
                ('other_health_impairment', models.BooleanField(default=False, verbose_name='Other Health Impairment')),
                ('learning_disability', models.BooleanField(default=False, verbose_name='Specific Learning Disability')),
                ('speech_or_lang_impairment', models.BooleanField(default=False, verbose_name='Speech or Language Impairment')),
                ('traumatic_brain_injury', models.BooleanField(default=False, verbose_name='Traumatic Brain Injury')),
                ('visual_impairment', models.BooleanField(default=False, verbose_name='Visual Impairment')),
                ('dyscalculia', models.BooleanField(default=False, verbose_name='Dyscalculia')),
                ('dysgraphia', models.BooleanField(default=False, verbose_name='Dysgraphia')),
                ('dyslexia', models.BooleanField(default=False, verbose_name='Dyslexia')),
                ('neurological_impairments', models.BooleanField(default=False, verbose_name='Related to Neurological Impairments')),
                ('highest_level_completed', models.CharField(choices=[('1', 'NO FORMAL SCHOOL'), ('2', 'COMPLETED 1 YEAR'), ('3', 'COMPLETED 2 YEARS'), ('4', 'COMPLETED 3 YEARS'), ('5', 'COMPLETED 4 YEARS'), ('6', 'COMPLETED 5 YEARS'), ('7', 'COMPLETED 6 YEARS'), ('8', 'COMPLETED 7 YEARS'), ('9', 'COMPLETED 8 YEARS'), ('10', 'COMPLETED 9 YEARS'), ('11', 'COMPLETED 10 YEARS'), ('12', 'COMPLETED 11 YEARS'), ('13', 'COMPLETED 12 YEARS (HS DIPLOMA NOT EARNED)'), ('14', 'COMPLETED 13 YEARS'), ('15', 'COMP 14 YEARS/ASSC DEG/TECHNICAL DIPLOMA'), ('16', 'COMPLETED 15 YEARS'), ('17', 'COMPLETED BACHELOR DEGREE'), ('18', 'COMPLETED BEYOND BACHELOR DEGREE'), ('19', 'HIGH SCHOOL EQUIVALENCY'), ('20', 'CERTIFICATE OF ATTENDANCE OR COMPLETION (HS ONLY)'), ('21', 'POST SECONDARY DEGREE/CERTIFICATE EARNED'), ('22', 'COMPLETED 12 YEARS (HS DIPLOMA EARNED)')], default='1', max_length=2)),
                ('highet_level_at_entry', models.CharField(choices=[('0', 'NO SCHOOL GRADE COMPLETED'), ('1', 'COMPLETED 1 YEAR'), ('2', 'COMPLETED 2 YEARS'), ('3', 'COMPLETED 3 YEARS'), ('4', 'COMPLETED 4 YEARS'), ('5', 'COMPLETED 5 YEARS'), ('6', 'COMPLETED 6 YEARS'), ('7', 'COMPLETED 7 YEARS'), ('8', 'COMPLETED 8 YEARS'), ('9', 'COMPLETED 9 YEARS'), ('10', 'COMPLETED 10 YEARS'), ('11', 'COMPLETED 11 YEARS'), ('12', 'COMPLETED 12 YEARS')], default='0', max_length=2)),
                ('school_location', models.CharField(choices=[('', 'Please Select'), ('1', 'US Based'), ('2', 'Non-US Based')], default='1', max_length=1)),
                ('state_id_checked', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'WIOA records',
            },
        ),
        migrations.CreateModel(
            name='CollegeInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ged_hiset', models.CharField(choices=[('1', 'Yes, high school diploma'), ('2', 'Yes, high school equivalency'), ('3', 'No')], max_length=1, verbose_name='Do you have your high school diploma or high school equivalency (GED/HiSET)?')),
                ('current_adult_ed', models.BooleanField(default=True, verbose_name='Check this box if you are currently attending adult education classes')),
                ('adult_ed_location', models.CharField(blank=True, max_length=50, verbose_name='Where?')),
                ('bpcc', models.BooleanField(default=False, verbose_name='Bossier Parish Community College (BPCC)')),
                ('brcc', models.BooleanField(default=False, verbose_name='Baton Rouge Community College (BRCC)')),
                ('ctcc', models.BooleanField(default=False, verbose_name='Central Louisiana Technical Community College (CTCC)')),
                ('dcc', models.BooleanField(default=False, verbose_name='Delgado Community College')),
                ('ldcc', models.BooleanField(default=False, verbose_name='Louisiana Delta Community College')),
                ('ftcc', models.BooleanField(default=False, verbose_name='Fletcher Technical Community College')),
                ('ntcc', models.BooleanField(default=False, verbose_name='Northshore Technical Community College')),
                ('ncc', models.BooleanField(default=False, verbose_name='Nunez Community College')),
                ('nltc', models.BooleanField(default=False, verbose_name='Northwest Louisiana Technical College')),
                ('rpcc', models.BooleanField(default=False, verbose_name='River Parishes Community College (RPCC)')),
                ('scl', models.BooleanField(default=False, verbose_name='South Central Louisiana Technical College (SCL)')),
                ('slcc', models.BooleanField(default=False, verbose_name='South Louisiana Community College')),
                ('sowela', models.BooleanField(default=False, verbose_name='Southwest Louisiana Technical Community College (SOWELA)')),
                ('lola', models.CharField(blank=True, max_length=15, verbose_name='Do you know your LOLA number?')),
                ('other_college', models.BooleanField(default=False, verbose_name='Have you ever attended college before (anywhere)?')),
                ('other_college_location', models.CharField(blank=True, max_length=30, verbose_name='Where was that?')),
                ('other_college_name', models.CharField(blank=True, max_length=50, verbose_name='Did you enroll under a different name than the one you gave us?')),
                ('prev_balance', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('C', "I don't know")], max_length=1, verbose_name="If you've attended college before, do you owe a balance to that college?")),
                ('financial_aid', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('C', "I don't know")], max_length=1, verbose_name='Have you ever used financial aid (student loans or grants) before?')),
                ('aid_status', models.CharField(blank=True, choices=[('D', 'Default'), ('R', 'Repayment'), ('P', 'Paid in full'), ('U', "I don't know"), ('O', 'Other')], max_length=1, verbose_name='If you have used financial aid before, what is your current financial aid status?')),
                ('nslds_notes', models.CharField(blank=True, max_length=200, verbose_name='NLDS notes from ACE Staff:')),
                ('fafsa1617', models.BooleanField(default=False, verbose_name='2016-2017')),
                ('fafsa1718', models.BooleanField(default=False, verbose_name='2017-2018')),
                ('fafsa1819', models.BooleanField(default=False, verbose_name='2018-2019')),
                ('delgado_classes', models.CharField(blank=True, max_length=400, verbose_name="If you've taken college classes at Delgado, please list the classes you took and when, to the best of your knowledge.")),
                ('workforce_training', models.BooleanField(default=False, verbose_name='Have you ever take any workforce training classes?')),
                ('workforce_training_desc', models.CharField(blank=True, max_length=50, verbose_name='What kind of workforce training classes?')),
                ('serv_safe', models.BooleanField(default=False, verbose_name="ServSafe Manager's Level Certification")),
                ('nccer', models.BooleanField(default=False, verbose_name='NCCER Core Certification')),
                ('ic3', models.BooleanField(default=False, verbose_name='Internet and Computing Core (IC3) Certification')),
                ('first_aid', models.BooleanField(default=False, verbose_name='First Aid')),
                ('cpr', models.BooleanField(default=False, verbose_name='CPR')),
                ('employment_status', models.CharField(choices=[('F', 'Yes, I’m employed full-time (more than 30 hours per week).'), ('P', 'Yes, I’m employed part-time (less than 30 hours per week).'), ('L', 'No, but I’m looking for work.'), ('N', 'No, and I’m not looking for work right now.')], max_length=1, verbose_name='Are you currently employed?')),
                ('work_schedule', models.CharField(blank=True, max_length=400, verbose_name='What is your usual work schedule like?')),
                ('career_goals', models.CharField(blank=True, max_length=2000, verbose_name='What kind of career would you like to have when you finish school?')),
                ('notes', models.CharField(blank=True, max_length=2000)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='college_interest_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'College Interest Records',
            },
        ),
        migrations.CreateModel(
            name='ProspectNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_date', models.DateField()),
                ('contact_method', models.CharField(choices=[('Call', 'Call'), ('Text', 'Text'), ('Email', 'Email'), ('In Person', 'In Person')], max_length=10)),
                ('successful', models.BooleanField(default=False)),
                ('returning_student', models.BooleanField(default=False, verbose_name='Returning Student')),
                ('notes', models.TextField()),
                ('prospect', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='notes', to='people.prospect')),
            ],
            options={
                'ordering': ['contact_date', 'prospect'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=60, verbose_name='Email Address')),
                ('alt_email', models.EmailField(blank=True, max_length=60, verbose_name='Alternate Email Address')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('alt_phone', models.CharField(blank=True, max_length=20, verbose_name='Alternate Phone Number')),
                ('street_address_1', models.CharField(max_length=60, verbose_name='Street Address 1')),
                ('street_address_2', models.CharField(blank=True, max_length=60, verbose_name='Street Address 2')),
                ('city', models.CharField(choices=[('Abbeville', 'Abbeville'), ('Abita Springs', 'Abita Springs'), ('Addis', 'Addis'), ('Albany', 'Albany'), ('Alexandria', 'Alexandria'), ('Amite', 'Amite'), ('Anacoco', 'Anacoco'), ('Angie', 'Angie'), ('Arcadia', 'Arcadia'), ('Arnaudville', 'Arnaudville'), ('Ashland', 'Ashland'), ('Athens', 'Athens'), ('Atlanta', 'Atlanta'), ('Baker', 'Baker'), ('Baldwin', 'Baldwin'), ('Ball', 'Ball'), ('Basile', 'Basile'), ('Baskin', 'Baskin'), ('Bastrop', 'Bastrop'), ('Baton Rouge', 'Baton Rouge'), ('Belcher', 'Belcher'), ('Benton', 'Benton'), ('Bernice', 'Bernice'), ('Berwick', 'Berwick'), ('Bienville', 'Bienville'), ('Blanchard', 'Blanchard'), ('Bogalusa', 'Bogalusa'), ('Bonita', 'Bonita'), ('Bossier', 'Bossier'), ('Boutte', 'Boutte'), ('Boyce', 'Boyce'), ('Breaux Bridge', 'Breaux Bridge'), ('Broussard', 'Broussard'), ('Brusly', 'Brusly'), ('Bryceland', 'Bryceland'), ('Bunkie', 'Bunkie'), ('Calvin', 'Calvin'), ('Campti', 'Campti'), ('Cankton', 'Cankton'), ('Carencro', 'Carencro'), ('Castor', 'Castor'), ('Chalmette', 'Chalmette'), ('Central', 'Central'), ('Chataignier', 'Chataignier'), ('Chatham', 'Chatham'), ('Cheneyville', 'Cheneyville'), ('Choudrant', 'Choudrant'), ('Church Point', 'Church Point'), ('Clarence', 'Clarence'), ('Clarks', 'Clarks'), ('Clayton', 'Clayton'), ('Clinton', 'Clinton'), ('Colfax', 'Colfax'), ('Collinston', 'Collinston'), ('Columbia', 'Columbia'), ('Converse', 'Converse'), ('Cottonport', 'Cottonport'), ('Cotton Valley', 'Cotton Valley'), ('Coushatta', 'Coushatta'), ('Covington', 'Covington'), ('Creola', 'Creola'), ('Crowley', 'Crowley'), ('Cullen', 'Cullen'), ('Delcambre', 'Delcambre'), ('Delhi', 'Delhi'), ('Delta', 'Delta'), ('Denham Springs', 'Denham Springs'), ('DeQuincy', 'DeQuincy'), ('DeRidder', 'DeRidder'), ('Dixie Inn', 'Dixie Inn'), ('Dodson', 'Dodson'), ('Donaldsonville', 'Donaldsonville'), ('Downsville', 'Downsville'), ('Doyline', 'Doyline'), ('Dry Prong', 'Dry Prong'), ('Dubach', 'Dubach'), ('Dubberly', 'Dubberly'), ('Duson', 'Duson'), ('East Hodge', 'East Hodge'), ('Edgefield', 'Edgefield'), ('Elizabeth', 'Elizabeth'), ('Elton', 'Elton'), ('Epps', 'Epps'), ('Erath', 'Erath'), ('Eros', 'Eros'), ('Estherwood', 'Estherwood'), ('Eunice', 'Eunice'), ('Evergreen', 'Evergreen'), ('Farmerville', 'Farmerville'), ('Fenton', 'Fenton'), ('Ferriday', 'Ferriday'), ('Fisher', 'Fisher'), ('Florien', 'Florien'), ('Folsom', 'Folsom'), ('Fordoche', 'Fordoche'), ('Forest', 'Forest'), ('Forest Hill', 'Forest Hill'), ('Franklin', 'Franklin'), ('Franklinton', 'Franklinton'), ('French Settlement', 'French Settlement'), ('Georgetown', 'Georgetown'), ('Gibsland', 'Gibsland'), ('Gilbert', 'Gilbert'), ('Gilliam', 'Gilliam'), ('Glenmora', 'Glenmora'), ('Golden Meadow', 'Golden Meadow'), ('Goldonna', 'Goldonna'), ('Gonzales', 'Gonzales'), ('Grambling', 'Grambling'), ('Gramercy', 'Gramercy'), ('Grand Cane', 'Grand Cane'), ('Grand Coteau', 'Grand Coteau'), ('Grand Isle', 'Grand Isle'), ('Grayson', 'Grayson'), ('Greensburg', 'Greensburg'), ('Greenwood', 'Greenwood'), ('Gretna', 'Gretna'), ('Grosse Tete', 'Grosse Tete'), ('Gueydan', 'Gueydan'), ('Hall Summit', 'Hall Summit'), ('Hammond', 'Hammond'), ('Harahan', 'Harahan'), ('Harrisonburg', 'Harrisonburg'), ('Haughton', 'Haughton'), ('Haynesville', 'Haynesville'), ('Heflin', 'Heflin'), ('Henderson', 'Henderson'), ('Hessmer', 'Hessmer'), ('Hodge', 'Hodge'), ('Homer', 'Homer'), ('Hornbeck', 'Hornbeck'), ('Hosston', 'Hosston'), ('Houma', 'Houma'), ('Ida', 'Ida'), ('Independence', 'Independence'), ('Iota', 'Iota'), ('Iowa', 'Iowa'), ('Jackson', 'Jackson'), ('Jamestown', 'Jamestown'), ('Jeanerette', 'Jeanerette'), ('Jean Lafitte', 'Jean Lafitte'), ('Jena', 'Jena'), ('Jennings', 'Jennings'), ('Jonesboro', 'Jonesboro'), ('Jonesville', 'Jonesville'), ('Junction', 'Junction'), ('Kaplan', 'Kaplan'), ('Keachi', 'Keachi'), ('Keithville', 'Keithville'), ('Kenner', 'Kenner'), ('Kentwood', 'Kentwood'), ('Kilbourne', 'Kilbourne'), ('Killian', 'Killian'), ('Kinder', 'Kinder'), ('Krotz Springs', 'Krotz Springs'), ('Lafayette', 'Lafayette'), ('Lake Arthur', 'Lake Arthur'), ('Lake Charles', 'Lake Charles'), ('Lake Providence', 'Lake Providence'), ('Lecompte', 'Lecompte'), ('Leesville', 'Leesville'), ('Leonville', 'Leonville'), ('Lillie', 'Lillie'), ('Lisbon', 'Lisbon'), ('Livingston', 'Livingston'), ('Livonia', 'Livonia'), ('Lockport', 'Lockport'), ('Logansport', 'Logansport'), ('Longstreet', 'Longstreet'), ('Loreauville', 'Loreauville'), ('Lucky', 'Lucky'), ('Lutcher', 'Lutcher'), ('McNary', 'McNary'), ('Madisonville', 'Madisonville'), ('Mamou', 'Mamou'), ('Mandeville', 'Mandeville'), ('Mangham', 'Mangham'), ('Mansfield', 'Mansfield'), ('Mansura', 'Mansura'), ('Many', 'Many'), ('Maringouin', 'Maringouin'), ('Marion', 'Marion'), ('Marksville', 'Marksville'), ('Martin', 'Martin'), ('Maurice', 'Maurice'), ('Melville', 'Melville'), ('Mermentau', 'Mermentau'), ('Mer Rouge', 'Mer Rouge'), ('Merryville', 'Merryville'), ('Metairie', 'Metairie'), ('Minden', 'Minden'), ('Monroe', 'Monroe'), ('Montgomery', 'Montgomery'), ('Montpelier', 'Montpelier'), ('Mooringsport', 'Mooringsport'), ('Moreauville', 'Moreauville'), ('Morgan City', 'Morgan City'), ('Morganza', 'Morganza'), ('Morse', 'Morse'), ('Mound', 'Mound'), ('Mount Lebanon', 'Mount Lebanon'), ('Napoleonville', 'Napoleonville'), ('Natchez', 'Natchez'), ('Natchitoches', 'Natchitoches'), ('Newellton', 'Newellton'), ('New Iberia', 'New Iberia'), ('New Llano', 'New Llano'), ('New Orleans', 'New Orleans'), ('New Roads', 'New Roads'), ('Noble', 'Noble'), ('North Hodge', 'North Hodge'), ('Norwood', 'Norwood'), ('Oakdale', 'Oakdale'), ('Oak Grove', 'Oak Grove'), ('Oak Ridge', 'Oak Ridge'), ('Oberlin', 'Oberlin'), ('Oil City', 'Oil City'), ('Olla', 'Olla'), ('Opelousas', 'Opelousas'), ('Palmetto', 'Palmetto'), ('Parks', 'Parks'), ('Patterson', 'Patterson'), ('Pearl River', 'Pearl River'), ('Pine Prairie', 'Pine Prairie'), ('Pineville', 'Pineville'), ('Pioneer', 'Pioneer'), ('Plain Dealing', 'Plain Dealing'), ('Plaquemine', 'Plaquemine'), ('Plaucheville', 'Plaucheville'), ('Pleasant Hill', 'Pleasant Hill'), ('Pollock', 'Pollock'), ('Ponchatoula', 'Ponchatoula'), ('Port Allen', 'Port Allen'), ('Port Barre', 'Port Barre'), ('Port Vincent', 'Port Vincent'), ('Powhatan', 'Powhatan'), ('Provencal', 'Provencal'), ('Quitman', 'Quitman'), ('Rayne', 'Rayne'), ('Rayville', 'Rayville'), ('Reeves', 'Reeves'), ('Richmond', 'Richmond'), ('Richwood', 'Richwood'), ('Ridgecrest', 'Ridgecrest'), ('Ringgold', 'Ringgold'), ('Robeline', 'Robeline'), ('Rodessa', 'Rodessa'), ('Rosedale', 'Rosedale'), ('Roseland', 'Roseland'), ('Rosepine', 'Rosepine'), ('Ruston', 'Ruston'), ('St. Francisville', 'St. Francisville'), ('St. Gabriel', 'St. Gabriel'), ('St. Joseph', 'St. Joseph'), ('St. Martinville', 'St. Martinville'), ('Saline', 'Saline'), ('Sarepta', 'Sarepta'), ('Scott', 'Scott'), ('Shongaloo', 'Shongaloo'), ('Shreveport', 'Shreveport'), ('Sibley', 'Sibley'), ('Sicily Island', 'Sicily Island'), ('Sikes', 'Sikes'), ('Simmesport', 'Simmesport'), ('Simpson', 'Simpson'), ('Simsboro', 'Simsboro'), ('Slaughter', 'Slaughter'), ('Slidell', 'Slidell'), ('Sorrento', 'Sorrento'), ('South Mansfield', 'South Mansfield'), ('Spearsville', 'Spearsville'), ('Springfield', 'Springfield'), ('Springhill', 'Springhill'), ('Stanley', 'Stanley'), ('Sterlington', 'Sterlington'), ('Stonewall', 'Stonewall'), ('Sulphur', 'Sulphur'), ('Sun', 'Sun'), ('Sunset', 'Sunset'), ('Tallulah', 'Tallulah'), ('Tangipahoa', 'Tangipahoa'), ('Thibodaux', 'Thibodaux'), ('Tickfaw', 'Tickfaw'), ('Tullos', 'Tullos'), ('Turkey Creek', 'Turkey Creek'), ('Urania', 'Urania'), ('Varnado', 'Varnado'), ('Vidalia', 'Vidalia'), ('Vienna', 'Vienna'), ('Ville Platte', 'Ville Platte'), ('Vinton', 'Vinton'), ('Vivian', 'Vivian'), ('Walker', 'Walker'), ('Washington', 'Washington'), ('Waterproof', 'Waterproof'), ('Welsh', 'Welsh'), ('Westlake', 'Westlake'), ('West Monroe', 'West Monroe'), ('Westwego', 'Westwego'), ('White Castle', 'White Castle'), ('Wilson', 'Wilson'), ('Winnfield', 'Winnfield'), ('Winnsboro', 'Winnsboro'), ('Wisner', 'Wisner'), ('Woodworth', 'Woodworth'), ('Youngsville', 'Youngsville'), ('Zachary', 'Zachary'), ('Zwolle', 'Zwolle'), ('Other', 'Other')], default='New Orleans', max_length=30)),
                ('other_city', models.CharField(blank=True, max_length=30)),
                ('state', models.CharField(choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DC', 'District of Columbia'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MA', 'Massachusetts'), ('MD', 'Maryland'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VA', 'Virginia'), ('VT', 'Vermont'), ('WV', 'West Virginia'), ('WA', 'Washington'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], default='LA', max_length=2)),
                ('zip_code', models.CharField(max_length=10, verbose_name='Zip Code')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('emergency_contact', models.CharField(blank=True, max_length=60, verbose_name='Emergency Contact Full Name')),
                ('ec_phone', models.CharField(blank=True, max_length=20, verbose_name='Their Phone Number')),
                ('ec_email', models.EmailField(blank=True, max_length=40, verbose_name='Their Email Address')),
                ('ec_relation', models.CharField(choices=[('D', 'Father'), ('M', 'Mother'), ('S', 'Spouse'), ('B', 'Sibling'), ('F', 'Friend'), ('G', 'Legal Guardian'), ('O', 'Other')], default='O', max_length=1, verbose_name='Their Relationship to You')),
                ('nickname', models.CharField(blank=True, max_length=50, verbose_name='Preferred Name or Nickname')),
                ('pronoun', models.CharField(blank=True, choices=[('He/Him/His', 'He/Him/His'), ('She/Her/Hers', 'She/Her/Hers'), ('They/Them/Theirs', 'They/Them/Theirs'), ('Ze/Hir/Hirs', 'Ze/Hir/Hirs'), ('I do not use a pronoun', 'I do not use a pronoun'), ('Other, please ask', 'Other, please ask'), ('I use all gender pronouns', 'I use all gender pronouns')], max_length=25, verbose_name='Pronouns')),
                ('title', models.CharField(blank=True, choices=[('Mx.', 'Mx.'), ('Miss', 'Miss'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Mr.', 'Mr.'), ('Dr.', 'Dr.')], max_length=5, verbose_name='Title')),
                ('slug', models.CharField(default=people.models.make_staff_slug, max_length=5, unique=True)),
                ('wru', models.CharField(blank=True, max_length=5)),
                ('bio', models.TextField(blank=True, max_length=4000)),
                ('g_suite_email', models.EmailField(blank=True, max_length=50)),
                ('teacher', models.BooleanField(default=True)),
                ('prospect_advisor', models.BooleanField(default=False)),
                ('coach', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('full_time', models.BooleanField(default=False)),
                ('partner', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name_plural': 'staff',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.AddField(
            model_name='prospect',
            name='advisor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prospects', to='people.staff'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=60, verbose_name='Email Address')),
                ('alt_email', models.EmailField(blank=True, max_length=60, verbose_name='Alternate Email Address')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('alt_phone', models.CharField(blank=True, max_length=20, verbose_name='Alternate Phone Number')),
                ('street_address_1', models.CharField(max_length=60, verbose_name='Street Address 1')),
                ('street_address_2', models.CharField(blank=True, max_length=60, verbose_name='Street Address 2')),
                ('city', models.CharField(choices=[('Abbeville', 'Abbeville'), ('Abita Springs', 'Abita Springs'), ('Addis', 'Addis'), ('Albany', 'Albany'), ('Alexandria', 'Alexandria'), ('Amite', 'Amite'), ('Anacoco', 'Anacoco'), ('Angie', 'Angie'), ('Arcadia', 'Arcadia'), ('Arnaudville', 'Arnaudville'), ('Ashland', 'Ashland'), ('Athens', 'Athens'), ('Atlanta', 'Atlanta'), ('Baker', 'Baker'), ('Baldwin', 'Baldwin'), ('Ball', 'Ball'), ('Basile', 'Basile'), ('Baskin', 'Baskin'), ('Bastrop', 'Bastrop'), ('Baton Rouge', 'Baton Rouge'), ('Belcher', 'Belcher'), ('Benton', 'Benton'), ('Bernice', 'Bernice'), ('Berwick', 'Berwick'), ('Bienville', 'Bienville'), ('Blanchard', 'Blanchard'), ('Bogalusa', 'Bogalusa'), ('Bonita', 'Bonita'), ('Bossier', 'Bossier'), ('Boutte', 'Boutte'), ('Boyce', 'Boyce'), ('Breaux Bridge', 'Breaux Bridge'), ('Broussard', 'Broussard'), ('Brusly', 'Brusly'), ('Bryceland', 'Bryceland'), ('Bunkie', 'Bunkie'), ('Calvin', 'Calvin'), ('Campti', 'Campti'), ('Cankton', 'Cankton'), ('Carencro', 'Carencro'), ('Castor', 'Castor'), ('Chalmette', 'Chalmette'), ('Central', 'Central'), ('Chataignier', 'Chataignier'), ('Chatham', 'Chatham'), ('Cheneyville', 'Cheneyville'), ('Choudrant', 'Choudrant'), ('Church Point', 'Church Point'), ('Clarence', 'Clarence'), ('Clarks', 'Clarks'), ('Clayton', 'Clayton'), ('Clinton', 'Clinton'), ('Colfax', 'Colfax'), ('Collinston', 'Collinston'), ('Columbia', 'Columbia'), ('Converse', 'Converse'), ('Cottonport', 'Cottonport'), ('Cotton Valley', 'Cotton Valley'), ('Coushatta', 'Coushatta'), ('Covington', 'Covington'), ('Creola', 'Creola'), ('Crowley', 'Crowley'), ('Cullen', 'Cullen'), ('Delcambre', 'Delcambre'), ('Delhi', 'Delhi'), ('Delta', 'Delta'), ('Denham Springs', 'Denham Springs'), ('DeQuincy', 'DeQuincy'), ('DeRidder', 'DeRidder'), ('Dixie Inn', 'Dixie Inn'), ('Dodson', 'Dodson'), ('Donaldsonville', 'Donaldsonville'), ('Downsville', 'Downsville'), ('Doyline', 'Doyline'), ('Dry Prong', 'Dry Prong'), ('Dubach', 'Dubach'), ('Dubberly', 'Dubberly'), ('Duson', 'Duson'), ('East Hodge', 'East Hodge'), ('Edgefield', 'Edgefield'), ('Elizabeth', 'Elizabeth'), ('Elton', 'Elton'), ('Epps', 'Epps'), ('Erath', 'Erath'), ('Eros', 'Eros'), ('Estherwood', 'Estherwood'), ('Eunice', 'Eunice'), ('Evergreen', 'Evergreen'), ('Farmerville', 'Farmerville'), ('Fenton', 'Fenton'), ('Ferriday', 'Ferriday'), ('Fisher', 'Fisher'), ('Florien', 'Florien'), ('Folsom', 'Folsom'), ('Fordoche', 'Fordoche'), ('Forest', 'Forest'), ('Forest Hill', 'Forest Hill'), ('Franklin', 'Franklin'), ('Franklinton', 'Franklinton'), ('French Settlement', 'French Settlement'), ('Georgetown', 'Georgetown'), ('Gibsland', 'Gibsland'), ('Gilbert', 'Gilbert'), ('Gilliam', 'Gilliam'), ('Glenmora', 'Glenmora'), ('Golden Meadow', 'Golden Meadow'), ('Goldonna', 'Goldonna'), ('Gonzales', 'Gonzales'), ('Grambling', 'Grambling'), ('Gramercy', 'Gramercy'), ('Grand Cane', 'Grand Cane'), ('Grand Coteau', 'Grand Coteau'), ('Grand Isle', 'Grand Isle'), ('Grayson', 'Grayson'), ('Greensburg', 'Greensburg'), ('Greenwood', 'Greenwood'), ('Gretna', 'Gretna'), ('Grosse Tete', 'Grosse Tete'), ('Gueydan', 'Gueydan'), ('Hall Summit', 'Hall Summit'), ('Hammond', 'Hammond'), ('Harahan', 'Harahan'), ('Harrisonburg', 'Harrisonburg'), ('Haughton', 'Haughton'), ('Haynesville', 'Haynesville'), ('Heflin', 'Heflin'), ('Henderson', 'Henderson'), ('Hessmer', 'Hessmer'), ('Hodge', 'Hodge'), ('Homer', 'Homer'), ('Hornbeck', 'Hornbeck'), ('Hosston', 'Hosston'), ('Houma', 'Houma'), ('Ida', 'Ida'), ('Independence', 'Independence'), ('Iota', 'Iota'), ('Iowa', 'Iowa'), ('Jackson', 'Jackson'), ('Jamestown', 'Jamestown'), ('Jeanerette', 'Jeanerette'), ('Jean Lafitte', 'Jean Lafitte'), ('Jena', 'Jena'), ('Jennings', 'Jennings'), ('Jonesboro', 'Jonesboro'), ('Jonesville', 'Jonesville'), ('Junction', 'Junction'), ('Kaplan', 'Kaplan'), ('Keachi', 'Keachi'), ('Keithville', 'Keithville'), ('Kenner', 'Kenner'), ('Kentwood', 'Kentwood'), ('Kilbourne', 'Kilbourne'), ('Killian', 'Killian'), ('Kinder', 'Kinder'), ('Krotz Springs', 'Krotz Springs'), ('Lafayette', 'Lafayette'), ('Lake Arthur', 'Lake Arthur'), ('Lake Charles', 'Lake Charles'), ('Lake Providence', 'Lake Providence'), ('Lecompte', 'Lecompte'), ('Leesville', 'Leesville'), ('Leonville', 'Leonville'), ('Lillie', 'Lillie'), ('Lisbon', 'Lisbon'), ('Livingston', 'Livingston'), ('Livonia', 'Livonia'), ('Lockport', 'Lockport'), ('Logansport', 'Logansport'), ('Longstreet', 'Longstreet'), ('Loreauville', 'Loreauville'), ('Lucky', 'Lucky'), ('Lutcher', 'Lutcher'), ('McNary', 'McNary'), ('Madisonville', 'Madisonville'), ('Mamou', 'Mamou'), ('Mandeville', 'Mandeville'), ('Mangham', 'Mangham'), ('Mansfield', 'Mansfield'), ('Mansura', 'Mansura'), ('Many', 'Many'), ('Maringouin', 'Maringouin'), ('Marion', 'Marion'), ('Marksville', 'Marksville'), ('Martin', 'Martin'), ('Maurice', 'Maurice'), ('Melville', 'Melville'), ('Mermentau', 'Mermentau'), ('Mer Rouge', 'Mer Rouge'), ('Merryville', 'Merryville'), ('Metairie', 'Metairie'), ('Minden', 'Minden'), ('Monroe', 'Monroe'), ('Montgomery', 'Montgomery'), ('Montpelier', 'Montpelier'), ('Mooringsport', 'Mooringsport'), ('Moreauville', 'Moreauville'), ('Morgan City', 'Morgan City'), ('Morganza', 'Morganza'), ('Morse', 'Morse'), ('Mound', 'Mound'), ('Mount Lebanon', 'Mount Lebanon'), ('Napoleonville', 'Napoleonville'), ('Natchez', 'Natchez'), ('Natchitoches', 'Natchitoches'), ('Newellton', 'Newellton'), ('New Iberia', 'New Iberia'), ('New Llano', 'New Llano'), ('New Orleans', 'New Orleans'), ('New Roads', 'New Roads'), ('Noble', 'Noble'), ('North Hodge', 'North Hodge'), ('Norwood', 'Norwood'), ('Oakdale', 'Oakdale'), ('Oak Grove', 'Oak Grove'), ('Oak Ridge', 'Oak Ridge'), ('Oberlin', 'Oberlin'), ('Oil City', 'Oil City'), ('Olla', 'Olla'), ('Opelousas', 'Opelousas'), ('Palmetto', 'Palmetto'), ('Parks', 'Parks'), ('Patterson', 'Patterson'), ('Pearl River', 'Pearl River'), ('Pine Prairie', 'Pine Prairie'), ('Pineville', 'Pineville'), ('Pioneer', 'Pioneer'), ('Plain Dealing', 'Plain Dealing'), ('Plaquemine', 'Plaquemine'), ('Plaucheville', 'Plaucheville'), ('Pleasant Hill', 'Pleasant Hill'), ('Pollock', 'Pollock'), ('Ponchatoula', 'Ponchatoula'), ('Port Allen', 'Port Allen'), ('Port Barre', 'Port Barre'), ('Port Vincent', 'Port Vincent'), ('Powhatan', 'Powhatan'), ('Provencal', 'Provencal'), ('Quitman', 'Quitman'), ('Rayne', 'Rayne'), ('Rayville', 'Rayville'), ('Reeves', 'Reeves'), ('Richmond', 'Richmond'), ('Richwood', 'Richwood'), ('Ridgecrest', 'Ridgecrest'), ('Ringgold', 'Ringgold'), ('Robeline', 'Robeline'), ('Rodessa', 'Rodessa'), ('Rosedale', 'Rosedale'), ('Roseland', 'Roseland'), ('Rosepine', 'Rosepine'), ('Ruston', 'Ruston'), ('St. Francisville', 'St. Francisville'), ('St. Gabriel', 'St. Gabriel'), ('St. Joseph', 'St. Joseph'), ('St. Martinville', 'St. Martinville'), ('Saline', 'Saline'), ('Sarepta', 'Sarepta'), ('Scott', 'Scott'), ('Shongaloo', 'Shongaloo'), ('Shreveport', 'Shreveport'), ('Sibley', 'Sibley'), ('Sicily Island', 'Sicily Island'), ('Sikes', 'Sikes'), ('Simmesport', 'Simmesport'), ('Simpson', 'Simpson'), ('Simsboro', 'Simsboro'), ('Slaughter', 'Slaughter'), ('Slidell', 'Slidell'), ('Sorrento', 'Sorrento'), ('South Mansfield', 'South Mansfield'), ('Spearsville', 'Spearsville'), ('Springfield', 'Springfield'), ('Springhill', 'Springhill'), ('Stanley', 'Stanley'), ('Sterlington', 'Sterlington'), ('Stonewall', 'Stonewall'), ('Sulphur', 'Sulphur'), ('Sun', 'Sun'), ('Sunset', 'Sunset'), ('Tallulah', 'Tallulah'), ('Tangipahoa', 'Tangipahoa'), ('Thibodaux', 'Thibodaux'), ('Tickfaw', 'Tickfaw'), ('Tullos', 'Tullos'), ('Turkey Creek', 'Turkey Creek'), ('Urania', 'Urania'), ('Varnado', 'Varnado'), ('Vidalia', 'Vidalia'), ('Vienna', 'Vienna'), ('Ville Platte', 'Ville Platte'), ('Vinton', 'Vinton'), ('Vivian', 'Vivian'), ('Walker', 'Walker'), ('Washington', 'Washington'), ('Waterproof', 'Waterproof'), ('Welsh', 'Welsh'), ('Westlake', 'Westlake'), ('West Monroe', 'West Monroe'), ('Westwego', 'Westwego'), ('White Castle', 'White Castle'), ('Wilson', 'Wilson'), ('Winnfield', 'Winnfield'), ('Winnsboro', 'Winnsboro'), ('Wisner', 'Wisner'), ('Woodworth', 'Woodworth'), ('Youngsville', 'Youngsville'), ('Zachary', 'Zachary'), ('Zwolle', 'Zwolle'), ('Other', 'Other')], default='New Orleans', max_length=30)),
                ('other_city', models.CharField(blank=True, max_length=30)),
                ('state', models.CharField(choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DC', 'District of Columbia'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MA', 'Massachusetts'), ('MD', 'Maryland'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VA', 'Virginia'), ('VT', 'Vermont'), ('WV', 'West Virginia'), ('WA', 'Washington'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], default='LA', max_length=2)),
                ('zip_code', models.CharField(max_length=10, verbose_name='Zip Code')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('emergency_contact', models.CharField(blank=True, max_length=60, verbose_name='Emergency Contact Full Name')),
                ('ec_phone', models.CharField(blank=True, max_length=20, verbose_name='Their Phone Number')),
                ('ec_email', models.EmailField(blank=True, max_length=40, verbose_name='Their Email Address')),
                ('ec_relation', models.CharField(choices=[('D', 'Father'), ('M', 'Mother'), ('S', 'Spouse'), ('B', 'Sibling'), ('F', 'Friend'), ('G', 'Legal Guardian'), ('O', 'Other')], default='O', max_length=1, verbose_name='Their Relationship to You')),
                ('nickname', models.CharField(blank=True, max_length=50, verbose_name='Preferred Name or Nickname')),
                ('pronoun', models.CharField(blank=True, choices=[('He/Him/His', 'He/Him/His'), ('She/Her/Hers', 'She/Her/Hers'), ('They/Them/Theirs', 'They/Them/Theirs'), ('Ze/Hir/Hirs', 'Ze/Hir/Hirs'), ('I do not use a pronoun', 'I do not use a pronoun'), ('Other, please ask', 'Other, please ask'), ('I use all gender pronouns', 'I use all gender pronouns')], max_length=25, verbose_name='Pronouns')),
                ('title', models.CharField(blank=True, choices=[('Mx.', 'Mx.'), ('Miss', 'Miss'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Mr.', 'Mr.'), ('Dr.', 'Dr.')], max_length=5, verbose_name='Title')),
                ('slug', models.CharField(default=people.models.make_student_slug, max_length=5, unique=True)),
                ('intake_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('WRU_ID', models.CharField(blank=True, max_length=20, null=True)),
                ('other_ID', models.CharField(blank=True, max_length=20, verbose_name='State ID, Passport #, Visa info, etc. (Optional)')),
                ('other_ID_name', models.CharField(blank=True, max_length=20, verbose_name='What kind of ID is this? (Optional)')),
                ('US_citizen', models.BooleanField(default=False, verbose_name='US Citizen')),
                ('prior_registration', models.BooleanField(default=False, help_text='Have you registered with this program in the past?', verbose_name='Returning Student')),
                ('program', models.CharField(choices=[('C', 'College and Career Readiness - HiSET Prep Classes'), ('E', 'Beginning English Language Classes'), ('D', 'Online Classes'), ('A', 'ACE Program')], default='C', max_length=1)),
                ('ccr_app', models.BooleanField(default=False, verbose_name='HiSET In-Person')),
                ('ell_app', models.BooleanField(default=False, verbose_name='ELL In-Person')),
                ('ell_online_app', models.BooleanField(default=False, verbose_name='ELL Online')),
                ('ace_app', models.BooleanField(default=False, verbose_name='ACE')),
                ('e_learn_app', models.BooleanField(default=False, verbose_name='HiSET Online')),
                ('success_app', models.BooleanField(default=False, verbose_name='Success')),
                ('eng_boot_app', models.BooleanField(default=False, verbose_name='Eng. Boot')),
                ('math_boot_app', models.BooleanField(default=False, verbose_name='Math Boot')),
                ('accuplacer_app', models.BooleanField(default=False, verbose_name='Accuplacer')),
                ('certifications_app', models.BooleanField(default=False, verbose_name='Certifications')),
                ('parish', models.CharField(choices=[('1', 'Outside LA'), ('2', 'Acadia'), ('3', 'Allen'), ('4', 'Ascension'), ('5', 'Assumption'), ('6', 'Avoyelles'), ('7', 'Beauregard'), ('8', 'Bienville'), ('9', 'Bossier'), ('10', 'Caddo'), ('11', 'Calcasieu'), ('12', 'Caldwell'), ('13', 'Cameron'), ('14', 'Catahoula'), ('15', 'Claiborne'), ('16', 'Concordia'), ('17', 'De Soto'), ('18', 'East Baton Rouge'), ('19', 'East Carroll'), ('20', 'East Feliciana'), ('21', 'Evangeline'), ('22', 'Franklin'), ('23', 'Grant'), ('24', 'Iberia'), ('25', 'Iberville'), ('26', 'Jackson'), ('27', 'Jefferson'), ('28', 'Jefferson Davis'), ('29', 'Lafayette'), ('30', 'Lafourche'), ('31', 'La Salle'), ('32', 'Lincoln'), ('33', 'Livingston'), ('34', 'Madison'), ('35', 'Morehouse'), ('36', 'Natchitoches'), ('37', 'Orleans'), ('38', 'Ouachita'), ('39', 'Plaquemines'), ('40', 'Pointe Coupee'), ('41', 'Rapides'), ('42', 'Red River'), ('43', 'Richland'), ('44', 'Sabine'), ('45', 'St. Bernard'), ('46', 'St. Charles'), ('47', 'St. Helena'), ('48', 'St. James'), ('49', 'St. John the Baptist'), ('50', 'St. Landry'), ('51', 'St. Martin'), ('52', 'St. Mary'), ('53', 'St. Tammany'), ('54', 'Tangipahoa'), ('55', 'Tensas'), ('56', 'Terrebonne'), ('57', 'Union'), ('58', 'Vermilion'), ('59', 'Vernon'), ('60', 'Washington'), ('61', 'Webster'), ('62', 'West Baton Rouge'), ('63', 'West Carroll'), ('64', 'West Feliciana'), ('65', 'Winn')], default='37', max_length=2)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, verbose_name='Sex')),
                ('marital_status', models.CharField(choices=[('S', 'Single'), ('M', 'Married'), ('D', 'Divorced'), ('W', 'Widowed'), ('O', 'Other')], default='S', max_length=1, verbose_name='Marital Status')),
                ('partner', models.CharField(blank=True, max_length=40)),
                ('duplicate', models.BooleanField(default=False)),
                ('dupl_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('paperwork', models.CharField(blank=True, choices=[('P', 'Pending'), ('I', 'Incomplete'), ('C', 'Complete')], default='P', max_length=1)),
                ('folder', models.CharField(blank=True, choices=[('P', 'Pending'), ('I', 'Incomplete'), ('C', 'Complete')], default='P', max_length=1)),
                ('orientation', models.CharField(blank=True, choices=[('P', 'Pending'), ('I', 'Incomplete'), ('C', 'Complete')], default='P', max_length=1)),
                ('intake_form', models.BooleanField(default=False)),
                ('intake_quiz', models.BooleanField(default=False)),
                ('allow_texts', models.BooleanField(default=True)),
                ('primary_goal', models.CharField(choices=[('1', 'I want to earn a high school equivalency diploma (HiSET, formerly GED)'), ('2', 'I want to work on my reading, writing, or math skills'), ('3', 'I want to learn English'), ('4', 'I want to prepare for college'), ('5', 'I want to work on my computer skills, financial skills, or health literacy'), ('6', 'I want to start college classes while working on my reading, writing, and math skills'), ('7', 'I want to participate in workforce trainings wille working on my reading, writing, and math skills'), ('8', 'I want to start college classes while earning my high school equivalency diploma'), ('9', 'I want to explore career options')], default='1', max_length=50)),
                ('check_goal_1', models.BooleanField(default=False, verbose_name='I want to earn a high school equivalency diploma (HiSET, formerly GED)')),
                ('check_goal_2', models.BooleanField(default=False, verbose_name='I want to work on my reading, writing, or math skills')),
                ('check_goal_3', models.BooleanField(default=False, verbose_name='I want to learn English')),
                ('check_goal_4', models.BooleanField(default=False, verbose_name='I want to prepare for college')),
                ('check_goal_5', models.BooleanField(default=False, verbose_name='I want to work on my computer skills, financial skills, or health literacy')),
                ('check_goal_6', models.BooleanField(default=False, verbose_name='I want to start college classes while working on my reading, writing, and math skills')),
                ('check_goal_7', models.BooleanField(default=False, verbose_name='I want to participate in workforce trainings wille working on my reading, writing, and math skills')),
                ('check_goal_8', models.BooleanField(default=False, verbose_name='I want to start college classes while earning my high school equivalency diploma')),
                ('check_goal_9', models.BooleanField(default=False, verbose_name='I want to explore career options')),
                ('on_campus', models.BooleanField(default=False, verbose_name='On Campus - in person courses where students meet at a specific time as a group')),
                ('online_solo', models.BooleanField(default=False, verbose_name='Online, Self Paced - online coursework completed when learner is ready')),
                ('online_cohort', models.BooleanField(default=False, verbose_name='Online, Cohort - online course where students meet at a specific time as a group')),
                ('hybrid', models.BooleanField(default=False, verbose_name='Hybrid - some online and some in person')),
                ('morning', models.BooleanField(default=False, verbose_name='Morning (8:30am - 1:00pm)')),
                ('afternoon', models.BooleanField(default=False, verbose_name='Afternoon (1:00pm - 4:00pm)')),
                ('evening', models.BooleanField(default=False, verbose_name='Evening (5:30pm - 8:30pm)')),
                ('weekend', models.BooleanField(default=False, verbose_name='Weekend')),
                ('mw', models.BooleanField(default=False, verbose_name='Monday and Wednesday')),
                ('tr', models.BooleanField(default=False, verbose_name='Tuesday and Thursday')),
                ('sat', models.BooleanField(default=False, verbose_name='Saturday')),
                ('computer_access', models.BooleanField(default=False, verbose_name='I have access to a computer or device to participate in online classes or resources')),
                ('internet_access', models.BooleanField(default=False, verbose_name='I have access to the internet')),
                ('duplicate_of', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='duplicated_by', to='people.student')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
    ]
